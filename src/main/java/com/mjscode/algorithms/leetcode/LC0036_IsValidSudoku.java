package com.mjscode.algorithms.leetcode;

/**
 * //请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * //
 * // 数字 1-9 在每一行只能出现一次。
 * // 数字 1-9 在每一列只能出现一次。
 * // 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * //
 * // 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * //
 * // 注意：
 * //
 * // 一个有效的数独（部分已被填充）不一定是可解的。
 * // 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * //
 * // 示例 1：
 * //
 * //输入：board =
 * //[["5","3",".",".","7",".",".",".","."]
 * //,["6",".",".","1","9","5",".",".","."]
 * //,[".","9","8",".",".",".",".","6","."]
 * //,["8",".",".",".","6",".",".",".","3"]
 * //,["4",".",".","8",".","3",".",".","1"]
 * //,["7",".",".",".","2",".",".",".","6"]
 * //,[".","6",".",".",".",".","2","8","."]
 * //,[".",".",".","4","1","9",".",".","5"]
 * //,[".",".",".",".","8",".",".","7","9"]]
 * //输出：true
 * //
 * // 示例 2：
 * //
 * //输入：board =
 * //[["8","3",".",".","7",".",".",".","."]
 * //,["6",".",".","1","9","5",".",".","."]
 * //,[".","9","8",".",".",".",".","6","."]
 * //,["8",".",".",".","6",".",".",".","3"]
 * //,["4",".",".","8",".","3",".",".","1"]
 * //,["7",".",".",".","2",".",".",".","6"]
 * //,[".","6",".",".",".",".","2","8","."]
 * //,[".",".",".","4","1","9",".",".","5"]
 * //,[".",".",".",".","8",".",".","7","9"]]
 * //输出：false
 * //解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无
 * //效的。
 * //
 * // 提示
 * //
 * // board.length == 9
 * // board[i].length == 9
 * // board[i][j] 是一位数字或者 '.'
 * //
 * // Related Topics 哈希表
 * @author binarySigh
 * @date 2021/4/13 22:51
 */
public class LC0036_IsValidSudoku {

    public static void main(String[] args){
        /*char[][] board = {
                {'5','3','.',  '.','7','.',  '.','.','.'},
                {'6','.','.',  '1','9','5',  '.','.','.'},
                {'.','9','8',  '.','.','.',  '.','6','.'},

                {'8','.','.',  '.','6','.',  '.','.','3'},
                {'4','.','.',  '8','.','3',  '.','.','1'},
                {'7','.','.',  '.','2','.',  '.','.','6'},

                {'.','6','.',  '.','.','.',  '2','8','.'},
                {'.','.','.',  '4','1','9',  '.','.','5'},
                {'.','.','.',  '.','8','.',  '.','7','9'}
        };*/
        char[][] board = {
                {'5','3','.',  '.','7','.',  '.','.','.'},
                {'6','.','.',  '1','9','5',  '.','.','.'},
                {'.','9','8',  '.','.','.',  '.','6','.'},

                {'8','.','.',  '.','6','.',  '.','.','3'},
                {'4','.','.',  '8','.','3',  '.','.','1'},
                {'7','.','.',  '.','2','.',  '.','.','6'},

                {'.','6','.',  '7','.','.',  '2','8','.'},
                {'.','.','.',  '4','1','9',  '.','.','5'},
                {'.','.','.',  '.','8','.',  '.','7','9'}
        };
        boolean isValid = isValidSudoku(board);
        System.out.println(isValid);
    }

    /**
     *解答成功:
     * 		执行耗时:1 ms,击败了100.00% 的Java用户
     * 		内存消耗:37.8 MB,击败了99.72% 的Java用户
     * @param board
     * @return
     */
    public static boolean isValidSudoku(char[][] board) {
        int row = 0;
        int[] cube = new int[3];
        int[] col = new int[9];
        int cur = 0;
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                if(board[i][j] != '.'){
                    cur = (1 << (board[i][j] - '0'));
                    if((row | cur) != row &&
                            (col[j] | cur) != col[j] &&
                            (cube[j/3] | cur) != cube[j/3]){
                        row |= cur;
                        col[j] |= cur;
                        cube[j/3] |= cur;
                    } else {
                        return false;
                    }
                }
                //重置信息
                if(j == 8){
                    row = 0;
                    if((i + 1) % 3 == 0){
                        cube[0] = 0;
                        cube[1] = 0;
                        cube[2] = 0;
                    }
                }
            }
        }
        return true;
    }
}
